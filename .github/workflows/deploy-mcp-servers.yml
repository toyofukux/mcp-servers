name: Deploy MCP Servers to Google Cloud Run

on:
  push:
    branches:
      - main

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check required global secrets
        id: check-global-secrets
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
        run: |
          missing_secrets=""

          if [[ -z "$GCP_CREDENTIALS" ]]; then
            missing_secrets="${missing_secrets} GCP_CREDENTIALS"
          fi

          if [[ -z "$GCP_REGION" ]]; then
            missing_secrets="${missing_secrets} GCP_REGION"
          fi

          if [[ ! -z "$missing_secrets" ]]; then
            echo "::error::Missing required global secrets:${missing_secrets}"
            echo "::error::Please set up the required secrets in your GitHub repository settings."
            echo "::error::See docs/github-secrets-setup.md for detailed instructions."
            exit 1
          else
            echo "All required global secrets are available"
          fi

  deploy:
    needs: validate-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Only fetch the latest commit

      - id: "auth"
        name: "Google Cloud Authentication"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: "Set up Google Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"

      - name: "Enable necessary APIs"
        run: |
          # Enable Container Registry API
          gcloud services enable containerregistry.googleapis.com
          # Enable Cloud Run API
          gcloud services enable run.googleapis.com

      - name: "Configure Docker authentication"
        run: |
          gcloud auth configure-docker

      - name: Get GitHub MCP server version
        id: github-version
        run: |
          if [[ ! -f mcps/github/version.txt ]]; then
            echo "::error::GitHub MCP server version file not found: mcps/github/version.txt"
            exit 1
          fi
          VERSION=$(cat mcps/github/version.txt)
          if [[ -z "$VERSION" ]]; then
            echo "::error::GitHub MCP server version is empty: mcps/github/version.txt"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "GitHub MCP server version: $VERSION"

      - name: Check GitHub secrets
        env:
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        run: |
          if [[ -z "$GH_PERSONAL_ACCESS_TOKEN" ]]; then
            echo "::error::Missing required secret for GitHub MCP server: GH_PERSONAL_ACCESS_TOKEN"
            echo "::error::Please set up this secret in your GitHub repository settings."
            echo "::error::See docs/github-secrets-setup.md for detailed instructions."
            exit 1
          fi

      - name: Get Notion MCP server version
        id: notion-version
        run: |
          if [[ ! -f mcps/notion/version.txt ]]; then
            echo "::error::Notion MCP server version file not found: mcps/notion/version.txt"
            exit 1
          fi
          VERSION=$(cat mcps/notion/version.txt)
          if [[ -z "$VERSION" ]]; then
            echo "::error::Notion MCP server version is empty: mcps/notion/version.txt"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Notion MCP server version: $VERSION"

      - name: Check Notion secrets
        env:
          NOTION_API_TOKEN: ${{ secrets.NOTION_API_TOKEN }}
        run: |
          if [[ -z "$NOTION_API_TOKEN" ]]; then
            echo "::error::Missing required secret for Notion MCP server: NOTION_API_TOKEN"
            echo "::error::Please set up this secret in your GitHub repository settings."
            echo "::error::See docs/github-secrets-setup.md for detailed instructions."
            exit 1
          fi

      - name: Push GitHub MCP Server image to GCR
        id: push-github-image
        env:
          VERSION: ${{ steps.github-version.outputs.version }}
        run: |
          echo "-------------------------------------"
          echo "Preparing GitHub MCP server image"
          echo "Version: ${{ steps.github-version.outputs.version }}"

          # Get image information
          IMAGE=$(cat mcps/github/docker-image.txt)
          SOURCE_IMAGE="${IMAGE}:${VERSION}"

          # Set GCR image information
          PROJECT_ID=$(gcloud config get-value project)
          GCR_IMAGE="gcr.io/${PROJECT_ID}/github-mcp-server:${VERSION}"
          echo "Source image: $SOURCE_IMAGE"
          echo "Target GCR image: $GCR_IMAGE"

          # Check if image already exists in GCR
          if gcloud container images list-tags "gcr.io/${PROJECT_ID}/github-mcp-server" --filter="tags=${VERSION}" --format="get(tags)" 2>/dev/null | grep -q "${VERSION}"; then
            echo "Image ${GCR_IMAGE} already exists in GCR. Skipping push."
          else
            echo "Image does not exist. Pulling and pushing to GCR..."
            # Pull image and push to GCR
            echo "Pulling image from source registry..."
            docker pull $SOURCE_IMAGE
            
            echo "Tagging and pushing image to GCR..."
            docker tag $SOURCE_IMAGE $GCR_IMAGE
            docker push $GCR_IMAGE
          fi

          # Output image name for subsequent steps
          echo "gcr_image=$GCR_IMAGE" >> $GITHUB_OUTPUT
          echo "-------------------------------------"

      - name: Deploy GitHub MCP Server
        env:
          VERSION: ${{ steps.github-version.outputs.version }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          GITHUB_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "-------------------------------------"
          echo "Deploying GitHub MCP server"
          echo "Version: ${{ steps.github-version.outputs.version }}"

          # Double-check required secrets before deployment
          if [[ -z "$GITHUB_PERSONAL_ACCESS_TOKEN" ]]; then
            echo "❌ Deployment failed: Missing required secret GH_PERSONAL_ACCESS_TOKEN"
            exit 1
          fi

          # Set image to use for deployment
          DEPLOY_IMAGE="${{ steps.push-github-image.outputs.gcr_image }}"
          echo "Using image: $DEPLOY_IMAGE"

          # Set service name
          SERVICE_NAME="mcp-github"
          echo "Service name: $SERVICE_NAME"

          # Cloud Runにデプロイ
          echo "Deploying to Cloud Run..."
          gcloud run deploy $SERVICE_NAME \
            --image $DEPLOY_IMAGE \
            --platform managed \
            --region $GCP_REGION \
            --memory 512Mi \
            --min-instances 0 \
            --max-instances 1 \
            --cpu 1 \
            --port 8080 \
            --timeout 3600 \
            --no-allow-unauthenticated \
            --set-env-vars="GITHUB_PERSONAL_ACCESS_TOKEN=$GH_PERSONAL_ACCESS_TOKEN"

          if [ $? -eq 0 ]; then
            echo "✅ Successfully deployed $SERVICE_NAME"
            SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $GCP_REGION --format="value(status.url)")
            echo "Service URL: $SERVICE_URL"
          else
            echo "❌ Failed to deploy $SERVICE_NAME"
            exit 1
          fi
          echo "-------------------------------------"

      - name: Push Notion MCP Server image to GCR
        id: push-notion-image
        env:
          VERSION: ${{ steps.notion-version.outputs.version }}
        run: |
          echo "-------------------------------------"
          echo "Preparing Notion MCP server image"
          echo "Version: ${{ steps.notion-version.outputs.version }}"

          # イメージ情報を取得
          IMAGE=$(cat mcps/notion/docker-image.txt)
          SOURCE_IMAGE="${IMAGE}:${VERSION}"

          # GCRイメージ情報を設定
          PROJECT_ID=$(gcloud config get-value project)
          GCR_IMAGE="gcr.io/${PROJECT_ID}/notion-mcp-server:${VERSION}"
          echo "Source image: $SOURCE_IMAGE"
          echo "Target GCR image: $GCR_IMAGE"

          # GCRにイメージが既に存在するか確認
          if gcloud container images list-tags "gcr.io/${PROJECT_ID}/notion-mcp-server" --filter="tags=${VERSION}" --format="get(tags)" 2>/dev/null | grep -q "${VERSION}"; then
            echo "イメージ ${GCR_IMAGE} は既にGCRに存在します。プッシュをスキップします。"
          else
            echo "イメージが存在しないため、プル・プッシュを行います。"
            # イメージをプルしてGCRにプッシュ
            echo "Pulling image from source registry..."
            docker pull $SOURCE_IMAGE
            
            echo "Tagging and pushing image to GCR..."
            docker tag $SOURCE_IMAGE $GCR_IMAGE
            docker push $GCR_IMAGE
          fi

          # 後続のステップで使用するため、イメージ名を出力
          echo "gcr_image=$GCR_IMAGE" >> $GITHUB_OUTPUT
          echo "-------------------------------------"

      - name: Deploy Notion MCP Server
        env:
          VERSION: ${{ steps.notion-version.outputs.version }}
          GCP_REGION: ${{ secrets.GCP_REGION }}
          NOTION_API_TOKEN: ${{ secrets.NOTION_API_TOKEN }}
        run: |
          echo "-------------------------------------"
          echo "Deploying Notion MCP server"
          echo "Version: ${{ steps.notion-version.outputs.version }}"

          # Double-check required secrets before deployment
          if [[ -z "$NOTION_API_TOKEN" ]]; then
            echo "❌ Deployment failed: Missing required secret NOTION_API_TOKEN"
            exit 1
          fi

          # デプロイに使用するイメージを設定
          DEPLOY_IMAGE="${{ steps.push-notion-image.outputs.gcr_image }}"
          echo "Using image: $DEPLOY_IMAGE"

          # サービス名設定
          SERVICE_NAME="mcp-notion"
          echo "Service name: $SERVICE_NAME"

          # Cloud Runにデプロイ
          echo "Deploying to Cloud Run..."
          # NotionヘッダーJSONフォーマット
          NOTION_HEADERS="{\"Authorization\":\"Bearer $NOTION_API_TOKEN\",\"Notion-Version\":\"2022-06-28\"}"

          gcloud run deploy $SERVICE_NAME \
            --image $DEPLOY_IMAGE \
            --platform managed \
            --region $GCP_REGION \
            --memory 512Mi \
            --min-instances 0 \
            --max-instances 1 \
            --cpu 1 \
            --port 8080 \
            --timeout 3600 \
            --no-allow-unauthenticated \
            --set-env-vars="OPENAPI_MCP_HEADERS=$NOTION_HEADERS"

          if [ $? -eq 0 ]; then
            echo "✅ Successfully deployed $SERVICE_NAME"
            SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $GCP_REGION --format="value(status.url)")
            echo "Service URL: $SERVICE_URL"
          else
            echo "❌ Failed to deploy $SERVICE_NAME"
            exit 1
          fi
          echo "-------------------------------------"

      # 注：新しいMCPサーバーを追加する場合は、上記と同様の形式でステップを追加してください
      # 各MCPサーバーは必要な環境変数やシークレットが異なるため、個別に設定が必要です
