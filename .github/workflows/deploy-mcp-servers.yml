name: Deploy MCP Servers to Google Cloud Run

on:
  push:
    paths:
      - "mcps/*/version.txt"
    branches:
      - main
  # manual trigger
  workflow_dispatch:
    inputs:
      force_github:
        description: "GitHub MCP „Çµ„Éº„Éê„Éº„ÇíÂº∑Âà∂ÁöÑ„Å´ÂÜç„Éá„Éó„É≠„Ç§„Åô„Çã"
        required: false
        type: boolean
        default: false
      force_notion:
        description: "Notion MCP „Çµ„Éº„Éê„Éº„ÇíÂº∑Âà∂ÁöÑ„Å´ÂÜç„Éá„Éó„É≠„Ç§„Åô„Çã"
        required: false
        type: boolean
        default: false

jobs:
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Check required global secrets
        id: check-global-secrets
        run: |
          missing_secrets=""

          if [[ -z "${{ secrets.GCP_PROJECT_ID }}" ]]; then
            missing_secrets="${missing_secrets} GCP_PROJECT_ID"
          fi

          if [[ -z "${{ secrets.GCP_CREDENTIALS }}" ]]; then
            missing_secrets="${missing_secrets} GCP_CREDENTIALS"
          fi

          if [[ -z "${{ secrets.GCP_REGION }}" ]]; then
            missing_secrets="${missing_secrets} GCP_REGION"
          fi

          if [[ ! -z "$missing_secrets" ]]; then
            echo "::error::Missing required global secrets:${missing_secrets}"
            echo "::error::Please set up the required secrets in your GitHub repository settings."
            echo "::error::See docs/github-secrets-setup.md for detailed instructions."
            exit 1
          else
            echo "All required global secrets are available"
          fi

  deploy:
    needs: validate-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Â§âÊõ¥„ÇíÊ§úÂá∫„Åô„Çã„Åü„ÇÅ„Å´ÂøÖË¶Å

      - id: "auth"
        name: "Google CloudË™çË®º"
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"
          project_id: "${{ secrets.GCP_PROJECT_ID }}"

      - name: "Set up Google Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"

      - name: Check if GitHub MCP server changed
        id: check-github
        run: |
          # ÊâãÂãï„Éà„É™„Ç¨„Éº„ÅßÂº∑Âà∂„Éá„Éó„É≠„Ç§„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_github }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$(cat mcps/github/version.txt)" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è ÊâãÂãï„Éà„É™„Ç¨„Éº„Å´„Çà„ÇãÂº∑Âà∂„Éá„Éó„É≠„Ç§„ÅåÊúâÂäπÂåñ„Åï„Çå„Åæ„Åó„Åü"
          # ÈÄöÂ∏∏„ÅÆÂ§âÊõ¥Ê§úÁü•
          elif git diff --name-only HEAD^ HEAD | grep -q "mcps/github/version.txt"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$(cat mcps/github/version.txt)" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

          # „Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÉÅ„Çß„ÉÉ„ÇØ„ÅØÂ§âÊõ¥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøË°å„ÅÜ
          if [[ "$(grep -E "^changed=true$" $GITHUB_OUTPUT || echo "")" ]]; then
            if [[ -z "${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" ]]; then
              echo "::error::Missing required secret for GitHub MCP server: GH_PERSONAL_ACCESS_TOKEN"
              echo "::error::Please set up this secret in your GitHub repository settings."
              echo "::error::See docs/github-secrets-setup.md for detailed instructions."
              echo "changed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Check if Notion MCP server changed
        id: check-notion
        run: |
          # ÊâãÂãï„Éà„É™„Ç¨„Éº„ÅßÂº∑Âà∂„Éá„Éó„É≠„Ç§„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_notion }}" == "true" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$(cat mcps/notion/version.txt)" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è ÊâãÂãï„Éà„É™„Ç¨„Éº„Å´„Çà„ÇãÂº∑Âà∂„Éá„Éó„É≠„Ç§„ÅåÊúâÂäπÂåñ„Åï„Çå„Åæ„Åó„Åü"
          # ÈÄöÂ∏∏„ÅÆÂ§âÊõ¥Ê§úÁü•
          elif git diff --name-only HEAD^ HEAD | grep -q "mcps/notion/version.txt"; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$(cat mcps/notion/version.txt)" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

          # „Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÉÅ„Çß„ÉÉ„ÇØ„ÅØÂ§âÊõ¥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅÆ„ÅøË°å„ÅÜ
          if [[ "$(grep -E "^changed=true$" $GITHUB_OUTPUT || echo "")" ]]; then
            if [[ -z "${{ secrets.NOTION_API_TOKEN }}" ]]; then
              echo "::error::Missing required secret for Notion MCP server: NOTION_API_TOKEN"
              echo "::error::Please set up this secret in your GitHub repository settings."
              echo "::error::See docs/github-secrets-setup.md for detailed instructions."
              echo "changed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

      - name: Deploy GitHub MCP Server
        if: steps.check-github.outputs.changed == 'true'
        run: |
          echo "-------------------------------------"
          echo "Deploying GitHub MCP server"
          echo "Version: ${{ steps.check-github.outputs.version }}"

          # Double-check required secrets before deployment
          if [[ -z "${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}" ]]; then
            echo "‚ùå Deployment failed: Missing required secret GH_PERSONAL_ACCESS_TOKEN"
            exit 1
          fi

          # „Ç§„É°„Éº„Ç∏ÊÉÖÂ†±„ÇíÂèñÂæó
          IMAGE=$(cat mcps/github/docker-image.txt)
          DEPLOY_IMAGE="${IMAGE}:${{ steps.check-github.outputs.version }}"
          echo "Using public image: $DEPLOY_IMAGE"

          # „Çµ„Éº„Éì„ÇπÂêçË®≠ÂÆö
          SERVICE_NAME="mcp-github"
          echo "Service name: $SERVICE_NAME"

          # Cloud Run„Å´„Éá„Éó„É≠„Ç§
          echo "Deploying to Cloud Run..."
          gcloud run deploy $SERVICE_NAME \
            --image $DEPLOY_IMAGE \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --memory 512Mi \
            --min-instances 0 \
            --max-instances 1 \
            --cpu 1 \
            --port 8080 \
            --timeout 3600 \
            --allow-unauthenticated=false \
            --set-env-vars="GITHUB_PERSONAL_ACCESS_TOKEN=${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}"

          if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully deployed $SERVICE_NAME"
            SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region ${{ secrets.GCP_REGION }} --format="value(status.url)")
            echo "Service URL: $SERVICE_URL"
          else
            echo "‚ùå Failed to deploy $SERVICE_NAME"
            exit 1
          fi
          echo "-------------------------------------"

      - name: Deploy Notion MCP Server
        if: steps.check-notion.outputs.changed == 'true'
        run: |
          echo "-------------------------------------"
          echo "Deploying Notion MCP server"
          echo "Version: ${{ steps.check-notion.outputs.version }}"

          # Double-check required secrets before deployment
          if [[ -z "${{ secrets.NOTION_API_TOKEN }}" ]]; then
            echo "‚ùå Deployment failed: Missing required secret NOTION_API_TOKEN"
            exit 1
          fi

          # „Ç§„É°„Éº„Ç∏ÊÉÖÂ†±„ÇíÂèñÂæó
          IMAGE=$(cat mcps/notion/docker-image.txt)
          DEPLOY_IMAGE="${IMAGE}:${{ steps.check-notion.outputs.version }}"
          echo "Using public image: $DEPLOY_IMAGE"

          # „Çµ„Éº„Éì„ÇπÂêçË®≠ÂÆö
          SERVICE_NAME="mcp-notion"
          echo "Service name: $SERVICE_NAME"

          # Cloud Run„Å´„Éá„Éó„É≠„Ç§
          echo "Deploying to Cloud Run..."
          # Notion„Éò„ÉÉ„ÉÄ„ÉºJSON„Éï„Ç©„Éº„Éû„ÉÉ„Éà
          NOTION_HEADERS="{\"Authorization\":\"Bearer ${{ secrets.NOTION_API_TOKEN }}\",\"Notion-Version\":\"2022-06-28\"}"

          gcloud run deploy $SERVICE_NAME \
            --image $DEPLOY_IMAGE \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --memory 512Mi \
            --min-instances 0 \
            --max-instances 1 \
            --cpu 1 \
            --port 8080 \
            --timeout 3600 \
            --allow-unauthenticated=false \
            --set-env-vars="OPENAPI_MCP_HEADERS=$NOTION_HEADERS"

          if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully deployed $SERVICE_NAME"
            SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region ${{ secrets.GCP_REGION }} --format="value(status.url)")
            echo "Service URL: $SERVICE_URL"
          else
            echo "‚ùå Failed to deploy $SERVICE_NAME"
            exit 1
          fi
          echo "-------------------------------------"

      # „Éá„Éó„É≠„Ç§„ÅÆÁµêÊûú„ÇíÈÄöÁü•
      - name: Send deployment summary
        if: always()
        run: |
          echo "-------------------------------------"
          echo "üìä Deployment Summary"
          echo "-------------------------------------"

          # GitHub MCP Server
          if [[ "${{ steps.check-github.outputs.changed }}" == "true" ]]; then
            if [[ "${{ steps.check-github.outcome }}" == "success" ]]; then
              echo "‚úÖ GitHub MCP Server: Successfully deployed version ${{ steps.check-github.outputs.version }}"
            else
              echo "‚ùå GitHub MCP Server: Deployment failed"
            fi
          else
            echo "‚è≠Ô∏è GitHub MCP Server: No changes, skipped deployment"
          fi

          # Notion MCP Server
          if [[ "${{ steps.check-notion.outputs.changed }}" == "true" ]]; then
            if [[ "${{ steps.check-notion.outcome }}" == "success" ]]; then
              echo "‚úÖ Notion MCP Server: Successfully deployed version ${{ steps.check-notion.outputs.version }}"
            else
              echo "‚ùå Notion MCP Server: Deployment failed"
            fi
          else
            echo "‚è≠Ô∏è Notion MCP Server: No changes, skipped deployment"
          fi

          echo "-------------------------------------"
          echo "For more details, see the deployment logs"
          echo "-------------------------------------"

      # Ê≥®ÔºöÊñ∞„Åó„ÅÑMCP„Çµ„Éº„Éê„Éº„ÇíËøΩÂä†„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅ‰∏äË®ò„Å®ÂêåÊßò„ÅÆÂΩ¢Âºè„Åß„Çπ„ÉÜ„ÉÉ„Éó„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ
      # ÂêÑMCP„Çµ„Éº„Éê„Éº„ÅØÂøÖË¶Å„Å™Áí∞Â¢ÉÂ§âÊï∞„ÇÑ„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÅåÁï∞„Å™„Çã„Åü„ÇÅ„ÄÅÂÄãÂà•„Å´Ë®≠ÂÆö„ÅåÂøÖË¶Å„Åß„Åô
